#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Graph represented as an adjacency matrix
int graph[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];

// Function to perform Depth First Search
void DFS(int node, int n) {
    visited[node] = 1;

    for (int i = 0; i < n; ++i) {
        if (graph[node][i] && !visited[i]) {
            DFS(i, n);
        }
    }
}

// Function to check if the graph is connected
bool isConnected(int n) {
    // Initialize visited array
    for (int i = 0; i < n; ++i) {
        visited[i] = 0;
    }

    // Start DFS from the first node
    DFS(0, n);

    // Check if all nodes were visited
    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            return false;
        }
    }

    return true;
}

int main() {
    int n, m;
    printf("Enter the number of nodes and edges: ");
    scanf("%d %d", &n, &m);

    // Initialize graph
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            graph[i][j] = 0;
        }
    }

    // Input edges
    printf("Enter the edges (u v):\n");
    for (int i = 0; i < m; ++i) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u][v] = graph[v][u] = 1; // Assuming undirected graph
    }

    // Check if graph is connected
    if (isConnected(n)) {
        printf("The graph is connected.\n");
    } else {
        printf("The graph is not connected.\n");
    }

    return 0;
}
