#include<stdio.h>
#include<stdlib.h>
struct Node*head=NULL;
struct Node
{
    int data;
    struct Node*prev;
    struct Node*next;
};
void deletedata(struct Node*head)
{
    struct Node*ptr,*temp;
    int val;
    printf("Enter value to be deleted:\n");
    scanf("%d",&val);
    temp=head;
    while(temp->data!=val)
        temp=temp->next;
    if(temp->next==NULL)
    {
        printf("Cannot delete.\n");
        return;
    }
    else if(temp->next->next==NULL)
    {
        temp->next=NULL;
        printf("Node deleted.\n");
    }
    else
    {
        ptr=temp->next;
        temp->next=ptr->next;
        ptr->next->prev=temp;
        free(ptr);
        printf("Node deleted.\n");
    }
}
void insertBefore(struct Node**head,int value)
{
    struct Node*temp=*head;
    int loc;
    printf("Enter location before which node must be inserted:\n");
    scanf("%d",&loc);
    for(int i=1;i<loc;i++)
    {
        temp=temp->next;
    }

    if(temp==NULL)
    {
        printf("Next node cannot be null.\n");
        return;
    }

    else
    {
        struct Node*newNode=(struct Node*)malloc(sizeof(struct Node));
        newNode->data=value;
        newNode->prev=temp->prev;
        temp->prev=newNode;

        newNode->next=temp;
        if(newNode->prev!=NULL)
            newNode->prev->next=newNode;
        else
            head=newNode;
    }
}
void insertatbegin(struct Node** head_ref, int new_data)
{
    // 1. allocate node
    struct Node* new_node
        = (struct Node*)malloc(sizeof(struct Node));

    // 2. put in the data
    new_node->data = new_data;

    // 3. Make next of new node as head and previous as NULL
    new_node->next = (*head_ref);
    new_node->prev = NULL;

    // 4. change prev of head node to new node
    if ((*head_ref) != NULL)
        (*head_ref)->prev = new_node;

    // 5. move the head to point to the new node
    (*head_ref) = new_node;
}

void display(struct Node*head)
{
    struct Node*temp=head;
    if(temp==NULL)
    {
        printf("Linked List is Empty.\n");
        return;
    }
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    printf("NULL\n");
}
int main()
{
    insertatbegin(&head,1);
    insertatbegin(&head,2);
    insertatbegin(&head,3);
    insertatbegin(&head,4);

    printf("Linked List:\n");
    display(head);

    insertBefore(&head,5);
    printf("After insertion before a node:\n");
    display(head);

    deletedata(head);
    printf("After deletion:\n");
    display(head);
}
